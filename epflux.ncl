;----------------------------------------------------------------------
; Script for plotting Eliassen-Palm Flux as generated by OpenIFS
;
;=======================================================================
;                  MAIN: 6.4.0 or later
;=======================================================================


; --- file names; open each; size information  

minlat	= 0
maxlat	= 159
show_accel 	= 0
pltDir	= "/p/project/chhb19/jstreffi/postprocessing/PAMIP/"              ; dir for output plot
pltType = "png"             	; getenv("pltType")   
pltRoot = "epflux"          	; getenv("pltRoot")

res	= getenv("res")		; model resolution
exp1	= getenv("exp1")	; experiment id 1
exp2	= getenv("exp2")	; experiment id 2
 
epf1	= addfile("./T"+tostring(res)+"/Experiment_"+tostring(exp1)+"/epflux/epf_"+tostring(exp1)+"_ensmean.nc", "r")    ; file references (pointers)
epf2	= addfile("./T"+tostring(res)+"/Experiment_"+tostring(exp2)+"/epflux/epf_"+tostring(exp2)+"_ensmean.nc", "r")    ; file references (pointers)

Fphi1	= epf1->Fphi(:,:,:) 
Fphi2	= epf2->Fphi(:,:,:) 
Fp1	= epf1->Fp(:,:,:)
Fp2	= epf2->Fp(:,:,:)
EPdiv1= epf1->EPdiv(:,:,:)
EPdiv2= epf2->EPdiv(:,:,:)
dudt1 = epf1->dudt(:,:,:)
dudt2 = epf2->dudt(:,:,:)

plev	= epf1->plev(:)/100
time	= epf1->time(:)
lat   = -epf1->lat(:)


; --- Setting counters of bootstrapping

if (res .eq. 159) then
	i = 101
	ensnumber = 300
elseif (res .eq. 511) then
	i = 101
	ensnumber = 200
elseif (res .eq. 1279) then
	i = 61
	ensnumber = 100
end if


; --- Reading first Experiment bootstrapping data
begin
	index      = sprinti("%0.3i", ispan(i,ensnumber,1))
	all_files = "./T"+tostring(res)+"/Experiment_"+tostring(exp1)+"/epflux/epf_"+tostring(exp1)+"_"+index+".nc"
	fall = addfiles (all_files, "r")
	ListSetType (fall, "join")
	Fphi1_total  = fall[:]->Fphi   
	Fp1_total  	= fall[:]->Fp   
	EPdiv1_total = fall[:]->EPdiv
	dudt1_total 	= fall[:]->dudt
end

; --- Reading second Experiment bootstrapping data
begin
	index      = sprinti("%0.3i", ispan(i,ensnumber,1))
	all_files = "./T"+tostring(res)+"/Experiment_"+tostring(exp2)+"/epflux/epf_"+tostring(exp2)+"_"+index+".nc"
	fall = addfiles (all_files, "r")
	ListSetType (fall, "join")
	Fphi2_total  = fall[:]->Fphi   
	Fp2_total    = fall[:]->Fp 
	EPdiv2_total = fall[:]->EPdiv
	dudt2_total  = fall[:]->dudt
end

;printVarSummary(Fphi1_total)
;printVarSummary(Fphi2_total)
;printVarSummary(Fp1_total)
;printVarSummary(Fp2_total)
;printVarSummary(EPdiv1_total)
;printVarSummary(EPdiv2_total)
;printVarSummary(dudt1_total)
;printVarSummary(dudt2_total)


; --- Bootstrapping hypothesis test

nBoot		= 1000         							; user set
nDim		= 0								; or (/0,0/); dimension numbers corresponding to 'N'
opt		= True								; use all default options
BootStrap	= bootstrap_diff(Fphi2_total, Fphi1_total, nBoot, nDim, opt)	; do all the resampling and calculations
rBoot		= BootStrap[0]							; All the bootstrapped values
rBootLow95	= bootstrap_estimate(rBoot, 0.025, False)   			; 2.5% lower confidence bound 
rBootLow80	= bootstrap_estimate(rBoot, 0.1, False)   			; 2.5% lower confidence bound 
rBootMed	= bootstrap_estimate(rBoot, 0.500, False)   			; 50.0% median of bootstrapped estimates
rBootHi95	= bootstrap_estimate(rBoot, 0.975, False)   			; 97.5% upper confidence bound
rBootHi80	= bootstrap_estimate(rBoot, 0.9, False)   			; 97.5% upper confidence bound

rBootp95 = where(rBootLow95 .gt. 0.025 .or. rBootHi95 .lt. 0.975, 0, 1)
rBootp80 = where(rBootLow80 .gt. 0.1 .or. rBootHi80 .lt. 0.9, 0, 1)


; --- Options for plotting
monthname = (/"January","February","March","April" \
            ,"May","June","July","August" \
            ,"September","October","November","December" /)

i = 0
do while (i.le.11) 

	vectitle =   "EPFlux monthly average for "+monthname(i) 
	print("Plotting "+vectitle)

	;************************************************
	; Create Plot 
	;************************************************
	; create vector plot resources for pressure-level grid 
	;************************************************
	res_vec = True
	res_vec@gsnMaximize           = True              ; make ps/eps/pdf large (no effect otherwise)
	res_vec@gsnDraw               = False             ; allows for manual overlaying        
	res_vec@gsnFrame              = False        

	res_vec@vfXArray              = lat(minlat:maxlat)               ; use lat for x axis
	res_vec@vfYArray              = plev              ; use pressure for y axis
	res_vec@trYReverse            = True              ; reverse y-axis
	res_vec@gsnYAxisIrregular2Log = True              ; set y-axis to log scale

	res_vec@tiXAxisString         = "latitude"        ; x-axis label
	res_vec@tiYAxisString         = "pressure (mb)"   ; y-axis label
	res_vec@tiXAxisFontHeightF    = 0.0175
	res_vec@tiYAxisFontHeightF    = 0.0175

	res_vec@vcRefMagnitudeF       = 100                ; add a reference vector
	res_vec@vcRefLengthF          = 0.05              ; what the ref length is
	res_vec@vcMonoLineArrowColor  = False             ; vec's colored by their mag
	res_vec@vcLevelPalette        = "rainbow"         
	res_vec@vcLevelSelectionMode  = "ManualLevels"
	res_vec@vcLevelSpacingF       = 10.0
	res_vec@vcMinLevelValF        = 0.0
	res_vec@vcMaxLevelValF        = 200
	res_vec@vcRefAnnoOn           = False             ; turn off ref wind barb
	res_vec@vcMinDistanceF        = 0.00875           ; trial and error

	res_vec@pmLabelBarDisplayMode = "Always"          ; Turn on a label bar.
	res_vec@pmLabelBarWidthF      = 0.08              ; make it thinner
	res_vec@lbPerimOn             = False             ; no box around it

	res_vec@tiMainString          = vectitle          ; plot title
	res_vec@tiMainFontHeightF     = 0.0185

	res_vec@tmXBLabelFontHeightF  = 0.0125
	res_vec@tmYLLabelFontHeightF  = 0.0125
	res_vec@tmXBMajorLengthF      = -0.0075           ; minus mean outward face
	res_vec@tmYLMajorLengthF      = -0.0075           ; minus mean outward face

	res_vec@tmYLMode              = "Explicit"        ; Pressure (YL) axis
	res_vec@tmYLValues            = plev            
	res_vec@tmYLLabels            = tostring(toint(plev)) 

	res_vec@vpWidthF              = 0.60              ; shape
	res_vec@vpHeightF             = 0.35
	;res_vec@lbLabelBarOn	      = True		  ;

; --- Create contour plot resources

	res_con                       = True
	res_con@gsnDraw               = False
	res_con@gsnFrame              = False

	res_con@sfXArray              = res_vec@vfXArray   ; =lat(minlat:maxlat)
	res_con@sfYArray              = res_vec@vfYArray   ; =plev
	res_con@trYReverse            = True               ; reverse y-axis

	res_con@gsnYAxisIrregular2Log = True               ; set y-axis to log scale
	res_con@gsnContourZeroLineThicknessF = 0.0
	res_con@gsnContourPosLineDashPattern = 2
	;res_con@gsnContourNegLineDashPattern = 2

	res_con@cnSmoothingOn         = True
	res_con@cnLineColor           = "black"      
	res_con@cnLineThicknessF      = 2.0                ; default is 1.0
	;res_con@gsnContourLineThicknessesScale  = 0.5
	res_con@cnLineLabelsOn        = False
	;res_con@lbLabelBarOn          = False		   ; Labelbar switch
	;res_con@cnInfoLabelOn        = False              ; default is True
  


; --- Experiment1: open file and create graphic

	pltType = "png"
	pltPath = pltDir+pltRoot+"_"+i+"_"+monthname(i)+"_T"+res+"_Experiment_"+exp1
	wks     = gsn_open_wks(pltType,pltPath)                
	plotvec = gsn_vector(wks,Fphi1(i,:,minlat:maxlat),Fp1(i,:,minlat:maxlat),res_vec)    

	if (show_accel .eq. 1) then 
		dudt1@_FillValue = -999.0
		dudt1(i,0,:) = dudt1@_FillValue					; Hide the 1000 mb level
		res_con@cnLevelSpacingF        = 1.				; Contour level Spacing
		plotvec2 = gsn_contour(wks,dudt1(i,:,minlat:maxlat),res_con)	; Creates plot for du/dt = div(F)/(a*cos(phi))
		overlay(plotvec,plotvec2)
	else
		EPdiv1@_FillValue = -999.0
		EPdiv1(i,0,:) = EPdiv1@_FillValue				; Hide the 1000 mb level
		res_con@cnLevelSpacingF        = 20.				; Contour level Spacing
		plotvec3 = gsn_contour(wks,EPdiv1(i,:,minlat:maxlat),res_con)	; Creates plot for div(F)
		overlay(plotvec,plotvec3)
	end if

	draw(plotvec)
	frame(wks)




; --- Experiment2: open file and create graphic

	pltType = "png"
	pltPath = pltDir+pltRoot+"_"+monthname(i)+"_T"+res+"_Experiment_"+exp2
	wks     = gsn_open_wks(pltType,pltPath)                
	plotvec = gsn_vector(wks,Fphi2(i,:,minlat:maxlat),Fp2(i,:,minlat:maxlat),res_vec)    

	if (show_accel .eq. 1) then 
		dudt2@_FillValue = -999.0
		dudt2(i,0,:) = dudt2@_FillValue					; Hide the 1000 mb level
		res_con@cnLevelSpacingF        = 1.				; Contour level Spacing
		plotvec2 = gsn_contour(wks,dudt2(i,:,minlat:maxlat),res_con)	; Creates plot for du/dt = div(F)/(a*cos(phi))
		overlay(plotvec,plotvec2)
	else
		EPdiv2@_FillValue = -999.0
		EPdiv2(i,0,:) = EPdiv2@_FillValue				; Hide the 1000 mb level
		res_con@cnLevelSpacingF        = 20.				; Contour level Spacing
		plotvec3 = gsn_contour(wks,EPdiv2(i,:,minlat:maxlat),res_con)	; Creates plot for div(F)
		overlay(plotvec,plotvec3)
	end if

	draw(plotvec)
	frame(wks)
	i = i+1
end do


i = 0
do while (i.le.11) 

	vectitle =   "EPFlux monthly average difference for "+monthname(i) 
	print("Plotting "+vectitle)

; --- Significance in background

	res_sig                       = True				; plot mods desired
	res_sig@cnFillOn              = True				; turn on color fill
	res_sig@cnFillColors          = (/"white","grey70"/)		; choose color map

	res_sig@gsnMaximize           = True              ; make ps/eps/pdf large (no effect otherwise)
	res_sig@gsnDraw               = False             ; allows for manual overlaying        
	res_sig@gsnFrame              = False        

	res_sig@trYReverse            = True              ; reverse y-axis
	res_sig@gsnYAxisIrregular2Log = True              ; set y-axis to log scale

	res_sig@tiXAxisString         = "latitude"        ; x-axis label
	res_sig@tiYAxisString         = "pressure (mb)"   ; y-axis label
	res_sig@tiXAxisFontHeightF    = 0.0175
	res_sig@tiYAxisFontHeightF    = 0.0175

	res_sig@pmLabelBarDisplayMode = "Conditional"          ; Turn on a label bar.
	res_sig@pmLabelBarWidthF      = 0.08              ; make it thinner
	res_sig@lbPerimOn             = False             ; no box around it

	res_sig@tiMainString          = vectitle          ; plot title
	res_sig@tiMainFontHeightF     = 0.0185

	res_sig@tmXBLabelFontHeightF  = 0.0125
	res_sig@tmYLLabelFontHeightF  = 0.0125
	res_sig@tmXBMajorLengthF      = -0.0075           ; minus mean outward face
	res_sig@tmYLMajorLengthF      = -0.0075           ; minus mean outward face

	res_sig@tmYLMode              = "Explicit"        ; Pressure (YL) axis
	res_sig@tmYLValues            = plev            
	res_sig@tmYLLabels            = tostring(toint(plev)) 

	res_sig@vpWidthF              = 0.60              ; shape
	res_sig@vpHeightF             = 0.35
	res_sig@sfXArray              = res_vec@vfXArray		; =lat(minlat:maxlat)
	res_sig@sfYArray              = res_vec@vfYArray		; =plev

	res_sig@cnLinesOn	      = False				; turn off contour lines
	res_sig@cnLineLabelsOn        = False
	res_sig@cnSmoothingOn         = False
	res_sig@cnLevelSpacingF       = 0.5
	res_sig@cnFillOpacityF        = 0.5

	res_sig@lbLabelBarOn          = False


	res_vec@vcRefMagnitudeF       = 10				; add a reference vector
	res_vec@vcRefLengthF          = 0.05				; what the ref length is
	res_vec@vcLevelSpacingF       = 1
	res_vec@vcMaxLevelValF        = 20



; --- Workframe for significance plot

	pltType = "png"
	pltPath = pltDir+pltRoot+"_diff_"+i+"_"+monthname(i)+"_T"+res+"_Experiment_"+exp2+"-"+exp1
	wks     = gsn_open_wks(pltType,pltPath)
	plotsig2 = gsn_csm_contour(wks,rBootp95(i,:,minlat:maxlat),res_sig)        					; create plot significance plot
	plotsig = gsn_csm_contour(wks,rBootp80(i,:,minlat:maxlat),res_sig)        					; create plot significance plot
	overlay(plotsig,plotsig2)

; --- Experiment2-Experiment1 vector graphic

	plotvec = gsn_vector(wks,Fphi2(i,:,minlat:maxlat)-Fphi1(i,:,minlat:maxlat),Fp2(i,:,minlat:maxlat)-Fp1(i,:,minlat:maxlat),res_vec)
	overlay(plotsig,plotvec)

; --- Acceleration or Divergence of EP Flux

	if (show_accel .eq. 1) then
		dudt1@_FillValue = -999.0
		dudt2@_FillValue = -999.0
		dudt1(i,0,:) = dudt1@_FillValue				; Hide the 1000 mb level
		dudt2(i,0,:) = dudt2@_FillValue				; Hide the 1000 mb level
		res_con@cnLevelSpacingF        = 0.1			; Contour level Spacing
		plotvec2 = gsn_contour(wks,dudt2(i,:,minlat:maxlat)-dudt1(i,:,minlat:maxlat),res_con)		; Creates plot for du/dt = div(F)/(a*cos(phi))
		overlay(plotsig,plotvec2)
	else
		EPdiv1@_FillValue = -999.0
		EPdiv2@_FillValue = -999.0
		EPdiv1(i,0,:) = EPdiv2@_FillValue			; Hide the 1000 mb level
		EPdiv2(i,0,:) = EPdiv2@_FillValue			; Hide the 1000 mb level
		res_con@cnLevelSpacingF        = 2.			; Contour level Spacing
		plotvec3 = gsn_contour(wks,EPdiv2(i,:,minlat:maxlat)-EPdiv1(i,:,minlat:maxlat),res_con)		; Creates plot for div(F)
		overlay(plotsig,plotvec3)
	end if



; --- Draw it all and start next interation
	draw(plotsig)
	frame(wks)

	i=i+1
end do

print ( "done" )

